name: Check

on:
  workflow_dispatch:  # can be triggered manually
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches-ignore:
      - update/*
    paths-ignore:
      - "LICENSE"
      - "**.md"

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - name: Generate Nix Matrix
        id: set-matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json .#githubActions.matrix)"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  flake-checker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - name: Run flake checker
        uses: DeterminateSystems/flake-checker-action@main

  build:
    name: ${{ matrix.name }} (${{ matrix.system }})
    needs: build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}
    steps:
      - name: Free disk space
        uses: wimpysworld/nothing-but-nix@main
        with:
          # Options: holster, carve, cleave (default), rampage
          hatchet-protocol: rampage
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install nix
        uses: cachix/install-nix-action@v31
      - name: Setup nix cache
        uses: cachix/cachix-action@v16
        with:
          name: matt-sturgeon
          extraPullNames: nix-community
          authToken: ${{ secrets.CACHIX_TOKEN }}
      - name: Build ${{ matrix.attr }}
        env:
          attr: ${{ matrix.attr }}
        run: |
          nix build ".#$attr" \
              --abort-on-warn \
              --print-build-logs \
              --log-format raw
